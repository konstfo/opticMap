{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asus\\\\Documents\\\\javascript_studying\\\\opticMap\\\\optic-map\\\\src\\\\OpticMap.js\";\nimport React, { Component } from \"react\"; // import { Actions } from \"flux-react\";\n\nimport { Map, View } from \"ol\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport TileLayer from \"ol/layer/Tile\";\nimport OSM from \"ol/source/OSM\"; // import WKT from \"ol/format/WKT\";\n// import Point from \"ol/geom/Point\";\n\nclass WebMapService extends React.Component {\n  constructor(props) {\n    super(props);\n    this.map = {};\n  }\n\n  componentDidMount() {\n    this.map = new ol.Map({\n      layers: [new TileLayer({\n        source: new OSM()\n      })],\n      target: \"map\",\n      view: new ol.View({\n        center: [0, 0],\n        zoom: 2\n      })\n    }); // this.map.updateSize();\n    // this.map.render();\n    // this.map.redraw();\n  }\n\n  render() {\n    //if(this.props.contentRender) {      // Conditional Rendering\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(Card, {\n      id: \"WebMapService\",\n      className: \"cardContainerFullScreen\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"map\",\n      className: \"map\",\n      ref: \"olmap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }))); //}else{return false}\n  }\n\n}\n\nWebMapService.propTypes = {\n  contentRender: PropTypes.bool\n};\n\nconst mapStateToProps = state => {\n  return {\n    contentRender: state.setWMSComponentStatus.setWMSComponentStatusState\n  };\n};\n\nexport default connect(mapStateToProps)(WebMapService); // class OpticMap extends Component {\n//   componentDidMount() {\n//     // create feature layer and vector source\n//     var featuresLayer = new VectorLayer({\n//       source: new VectorSource({\n//         features: []\n//       })\n//     });\n//     // create map object with feature layer\n//     var map = new Map({\n//       target: this.refs.mapContainer,\n//       layers: [\n//         //default OSM layer\n//         new TileLayer({\n//           source: new OSM()\n//         }),\n//         featuresLayer\n//       ],\n//       view: new View({\n//         center: [-11718716.28195593, 4869217.172379018], //Boulder\n//         zoom: 13\n//       })\n//     });\n//     // map.on(\"click\", this.handleMapClick.bind(this));\n//     // save map and layer references to local state\n//     this.setState({\n//       map: map,\n//       featuresLayer: featuresLayer\n//     });\n//   }\n//   // pass new features from props into the OpenLayers layer object\n//   componentDidUpdate(prevProps, prevState) {\n//     this.state.featuresLayer.setSource(\n//       new VectorSource({\n//         features: this.props.routes\n//       })\n//     );\n//   }\n//   // handleMapClick(event) {\n//   //   // create WKT writer\n//   //   var wktWriter = new WKT();\n//   //   // derive map coordinate (references map from Wrapper Component state)\n//   //   var clickedCoordinate = this.state.map.getCoordinateFromPixel(event.pixel);\n//   //   // create Point geometry from clicked coordinate\n//   //   var clickedPointGeom = new Point(clickedCoordinate);\n//   //   // write Point geometry to WKT with wktWriter\n//   //   var clickedPointWkt = wktWriter.writeGeometry(clickedPointGeom);\n//   //   // place Flux Action call to notify Store map coordinate was clicked\n//   //   Actions.setRoutingCoord(clickedPointWkt);\n//   // }\n//   render() {\n//     return <div ref=\"mapContainer\"></div>;\n//   }\n// }\n// export default OpticMap;","map":{"version":3,"sources":["C:/Users/asus/Documents/javascript_studying/opticMap/optic-map/src/OpticMap.js"],"names":["React","Component","Map","View","VectorLayer","VectorSource","TileLayer","OSM","WebMapService","constructor","props","map","componentDidMount","ol","layers","source","target","view","center","zoom","render","propTypes","contentRender","PropTypes","bool","mapStateToProps","state","setWMSComponentStatus","setWMSComponentStatusState","connect"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AAEA,SAASC,GAAT,EAAcC,IAAd,QAA0B,IAA1B;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,OAAOC,GAAP,MAAgB,eAAhB,C,CACA;AACA;;AAEA,MAAMC,aAAN,SAA4BR,KAAK,CAACC,SAAlC,CAA4C;AAC1CQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,GAAL,GAAW,EAAX;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKD,GAAL,GAAW,IAAIE,EAAE,CAACX,GAAP,CAAW;AACpBY,MAAAA,MAAM,EAAE,CACN,IAAIR,SAAJ,CAAc;AACZS,QAAAA,MAAM,EAAE,IAAIR,GAAJ;AADI,OAAd,CADM,CADY;AAMpBS,MAAAA,MAAM,EAAE,KANY;AAOpBC,MAAAA,IAAI,EAAE,IAAIJ,EAAE,CAACV,IAAP,CAAY;AAChBe,QAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,CADQ;AAEhBC,QAAAA,IAAI,EAAE;AAFU,OAAZ;AAPc,KAAX,CAAX,CADkB,CAclB;AACA;AACA;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAC,eAAT;AAAyB,MAAA,SAAS,EAAC,yBAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,EAAE,EAAC,KAAR;AAAc,MAAA,SAAS,EAAC,KAAxB;AAA8B,MAAA,GAAG,EAAC,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADF,CAFO,CASP;AACD;;AApCyC;;AAuC5CZ,aAAa,CAACa,SAAd,GAA0B;AACxBC,EAAAA,aAAa,EAAEC,SAAS,CAACC;AADD,CAA1B;;AAIA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLJ,IAAAA,aAAa,EAAEI,KAAK,CAACC,qBAAN,CAA4BC;AADtC,GAAP;AAGD,CAJD;;AAMA,eAAeC,OAAO,CAACJ,eAAD,CAAP,CAAyBjB,aAAzB,CAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA","sourcesContent":["import React, { Component } from \"react\";\n// import { Actions } from \"flux-react\";\n\nimport { Map, View } from \"ol\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport TileLayer from \"ol/layer/Tile\";\nimport OSM from \"ol/source/OSM\";\n// import WKT from \"ol/format/WKT\";\n// import Point from \"ol/geom/Point\";\n\nclass WebMapService extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.map = {};\n  }\n\n  componentDidMount() {\n    this.map = new ol.Map({\n      layers: [\n        new TileLayer({\n          source: new OSM()\n        })\n      ],\n      target: \"map\",\n      view: new ol.View({\n        center: [0, 0],\n        zoom: 2\n      })\n    });\n\n    // this.map.updateSize();\n    // this.map.render();\n    // this.map.redraw();\n  }\n\n  render() {\n    //if(this.props.contentRender) {      // Conditional Rendering\n    return (\n      <div>\n        <Card id=\"WebMapService\" className=\"cardContainerFullScreen\">\n          <div id=\"map\" className=\"map\" ref=\"olmap\"></div>\n        </Card>\n      </div>\n    );\n    //}else{return false}\n  }\n}\n\nWebMapService.propTypes = {\n  contentRender: PropTypes.bool\n};\n\nconst mapStateToProps = state => {\n  return {\n    contentRender: state.setWMSComponentStatus.setWMSComponentStatusState\n  };\n};\n\nexport default connect(mapStateToProps)(WebMapService);\n\n// class OpticMap extends Component {\n//   componentDidMount() {\n//     // create feature layer and vector source\n//     var featuresLayer = new VectorLayer({\n//       source: new VectorSource({\n//         features: []\n//       })\n//     });\n\n//     // create map object with feature layer\n//     var map = new Map({\n//       target: this.refs.mapContainer,\n//       layers: [\n//         //default OSM layer\n//         new TileLayer({\n//           source: new OSM()\n//         }),\n//         featuresLayer\n//       ],\n//       view: new View({\n//         center: [-11718716.28195593, 4869217.172379018], //Boulder\n//         zoom: 13\n//       })\n//     });\n\n//     // map.on(\"click\", this.handleMapClick.bind(this));\n\n//     // save map and layer references to local state\n//     this.setState({\n//       map: map,\n//       featuresLayer: featuresLayer\n//     });\n//   }\n\n//   // pass new features from props into the OpenLayers layer object\n//   componentDidUpdate(prevProps, prevState) {\n//     this.state.featuresLayer.setSource(\n//       new VectorSource({\n//         features: this.props.routes\n//       })\n//     );\n//   }\n\n//   // handleMapClick(event) {\n//   //   // create WKT writer\n//   //   var wktWriter = new WKT();\n\n//   //   // derive map coordinate (references map from Wrapper Component state)\n//   //   var clickedCoordinate = this.state.map.getCoordinateFromPixel(event.pixel);\n\n//   //   // create Point geometry from clicked coordinate\n//   //   var clickedPointGeom = new Point(clickedCoordinate);\n\n//   //   // write Point geometry to WKT with wktWriter\n//   //   var clickedPointWkt = wktWriter.writeGeometry(clickedPointGeom);\n\n//   //   // place Flux Action call to notify Store map coordinate was clicked\n//   //   Actions.setRoutingCoord(clickedPointWkt);\n//   // }\n\n//   render() {\n//     return <div ref=\"mapContainer\"></div>;\n//   }\n// }\n\n// export default OpticMap;\n"]},"metadata":{},"sourceType":"module"}