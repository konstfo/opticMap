{"ast":null,"code":"/*\n * ACTION\n * ====================================================================================\n * Creates a single function or a map of functions that when called with arguments will\n * emit a \"trigger\" event, passing the arguments\n * ====================================================================================\n */\nvar EventEmitter = require('eventemitter2').EventEmitter2 || require('eventemitter2');\n\nvar safeDeepClone = require('./safeDeepClone.js');\n\nvar createActionFunction = function (actionName) {\n  // Create the action function\n  var fn = function () {\n    // Grab all the arguments and convert to array\n    var args = safeDeepClone('[Circular]', [], Array.prototype.slice.call(arguments, 0));\n\n    if (!fn._events) {\n      throw new Error('You are triggering the action: ' + fn.handlerName + ', and nobody is listening to it yet. Remember to load up the store first');\n    } // Merge arguments array with \"trigger\", which is the\n    // event that will be triggered, passing the original arguments\n    // as arguments to the \"trigger\" event\n\n\n    args = ['trigger'].concat(args);\n    fn.emit.apply(fn, args);\n  };\n\n  var emitter = new EventEmitter(); // It is possible to listen to the function and to achieve that we\n  // have to manually inherit methods from EventEmitter\n\n  for (var prop in EventEmitter.prototype) {\n    if (EventEmitter.prototype.hasOwnProperty(prop)) {\n      fn[prop] = EventEmitter.prototype[prop];\n    }\n  } // Add handlerName\n\n\n  fn.handlerName = actionName;\n  return fn;\n};\n\nvar action = function () {\n  if (Array.isArray(arguments[0])) {\n    var actionMap = {};\n    arguments[0].forEach(function (actionName) {\n      actionMap[actionName] = createActionFunction(actionName);\n    });\n    return actionMap;\n  }\n\n  throw new Error('You are not passing an array to createActions');\n};\n\nmodule.exports = action;","map":{"version":3,"sources":["C:/Users/asus/Documents/javascript_studying/opticMap/optic-map/node_modules/flux-react/src/action.js"],"names":["EventEmitter","require","EventEmitter2","safeDeepClone","createActionFunction","actionName","fn","args","Array","prototype","slice","call","arguments","_events","Error","handlerName","concat","emit","apply","emitter","prop","hasOwnProperty","action","isArray","actionMap","forEach","module","exports"],"mappings":"AAAA;;;;;;;AAQA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAAP,CAAyBC,aAAzB,IAA0CD,OAAO,CAAC,eAAD,CAApE;;AACA,IAAIE,aAAa,GAAGF,OAAO,CAAC,oBAAD,CAA3B;;AAEA,IAAIG,oBAAoB,GAAG,UAAUC,UAAV,EAAsB;AAE/C;AACA,MAAIC,EAAE,GAAG,YAAY;AAEnB;AACA,QAAIC,IAAI,GAAGJ,aAAa,CAAC,YAAD,EAAe,EAAf,EAAmBK,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,CAAnB,CAAxB;;AAEA,QAAI,CAACN,EAAE,CAACO,OAAR,EAAiB;AACf,YAAM,IAAIC,KAAJ,CAAU,oCAAoCR,EAAE,CAACS,WAAvC,GAAqD,0EAA/D,CAAN;AACD,KAPkB,CASnB;AACA;AACA;;;AACAR,IAAAA,IAAI,GAAG,CAAC,SAAD,EAAYS,MAAZ,CAAmBT,IAAnB,CAAP;AACAD,IAAAA,EAAE,CAACW,IAAH,CAAQC,KAAR,CAAcZ,EAAd,EAAkBC,IAAlB;AAED,GAfD;;AAiBA,MAAIY,OAAO,GAAG,IAAInB,YAAJ,EAAd,CApB+C,CAsB/C;AACA;;AACA,OAAK,IAAIoB,IAAT,IAAiBpB,YAAY,CAACS,SAA9B,EAAyC;AACvC,QAAIT,YAAY,CAACS,SAAb,CAAuBY,cAAvB,CAAsCD,IAAtC,CAAJ,EAAiD;AAC/Cd,MAAAA,EAAE,CAACc,IAAD,CAAF,GAAWpB,YAAY,CAACS,SAAb,CAAuBW,IAAvB,CAAX;AACD;AACF,GA5B8C,CA8B/C;;;AACAd,EAAAA,EAAE,CAACS,WAAH,GAAiBV,UAAjB;AAEA,SAAOC,EAAP;AAED,CAnCD;;AAqCA,IAAIgB,MAAM,GAAG,YAAY;AAEvB,MAAId,KAAK,CAACe,OAAN,CAAcX,SAAS,CAAC,CAAD,CAAvB,CAAJ,EAAiC;AAC/B,QAAIY,SAAS,GAAG,EAAhB;AACAZ,IAAAA,SAAS,CAAC,CAAD,CAAT,CAAaa,OAAb,CAAqB,UAAUpB,UAAV,EAAsB;AACzCmB,MAAAA,SAAS,CAACnB,UAAD,CAAT,GAAwBD,oBAAoB,CAACC,UAAD,CAA5C;AACD,KAFD;AAGA,WAAOmB,SAAP;AACD;;AAED,QAAM,IAAIV,KAAJ,CAAU,+CAAV,CAAN;AAED,CAZD;;AAcAY,MAAM,CAACC,OAAP,GAAiBL,MAAjB","sourcesContent":["/*\n * ACTION\n * ====================================================================================\n * Creates a single function or a map of functions that when called with arguments will\n * emit a \"trigger\" event, passing the arguments\n * ====================================================================================\n */\n\nvar EventEmitter = require('eventemitter2').EventEmitter2 || require('eventemitter2');\nvar safeDeepClone = require('./safeDeepClone.js');\n\nvar createActionFunction = function (actionName) {\n\n  // Create the action function\n  var fn = function () {\n\n    // Grab all the arguments and convert to array\n    var args = safeDeepClone('[Circular]', [], Array.prototype.slice.call(arguments, 0));\n\n    if (!fn._events) {\n      throw new Error('You are triggering the action: ' + fn.handlerName + ', and nobody is listening to it yet. Remember to load up the store first');\n    }\n\n    // Merge arguments array with \"trigger\", which is the\n    // event that will be triggered, passing the original arguments\n    // as arguments to the \"trigger\" event\n    args = ['trigger'].concat(args);\n    fn.emit.apply(fn, args);\n\n  };\n\n  var emitter = new EventEmitter();\n\n  // It is possible to listen to the function and to achieve that we\n  // have to manually inherit methods from EventEmitter\n  for (var prop in EventEmitter.prototype) {\n    if (EventEmitter.prototype.hasOwnProperty(prop)) {\n      fn[prop] = EventEmitter.prototype[prop];\n    }\n  }\n  \n  // Add handlerName\n  fn.handlerName = actionName;\n\n  return fn;\n\n};\n\nvar action = function () {\n\n  if (Array.isArray(arguments[0])) {\n    var actionMap = {};\n    arguments[0].forEach(function (actionName) {\n      actionMap[actionName] = createActionFunction(actionName);\n    });\n    return actionMap;\n  }\n\n  throw new Error('You are not passing an array to createActions');\n\n};\n\nmodule.exports = action;\n"]},"metadata":{},"sourceType":"script"}