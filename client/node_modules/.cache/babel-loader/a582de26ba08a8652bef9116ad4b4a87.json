{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asus\\\\Documents\\\\javascript_studying\\\\opticMap\\\\optic-map\\\\src\\\\OpticMap.js\";\nimport React, { Component } from \"react\"; // import { Actions } from \"flux-react\";\n\nimport { Map, View } from \"ol\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport TileLayer from \"ol/layer/Tile\";\nimport XYZSource from \"ol/source/XYZ\";\nimport TileWMSSource from \"ol/source/TileWMS\";\nimport { ZoomSlider, MousePosition, ScaleLine, OverviewMap } from \"ol/control\";\nimport OSM from \"ol/source/OSM\";\nimport { fromLonLat } from \"ol/proj\";\nimport WKT from \"ol/format/WKT\";\nimport Point from \"ol/geom/Point\";\nimport \"ol/ol.css\";\nimport \"./OpticMap.css\"; // class OpticMap extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.updateDimensions = this.updateDimensions.bind(this);\n//   }\n//   updateDimensions() {\n//     const h = window.innerWidth >= 992 ? window.innerHeight : 400;\n//     this.setState({ height: h });\n//   }\n//   componentWillMount() {\n//     window.addEventListener(\"resize\", this.updateDimensions);\n//     this.updateDimensions();\n//   }\n//   componentDidMount() {\n//     // Create an Openlayer Map instance with two tile layers\n//     const map = new Map({\n//       //  Display the map in the div with the id of map\n//       target: \"map\",\n//       layers: [\n//         new TileLayer({\n//           source: new XYZSource({\n//             url: \"https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n//             projection: \"EPSG:3857\"\n//           })\n//         }),\n//         new TileLayer({\n//           source: new TileWMSSource({\n//             url: \"https://ahocevar.com/geoserver/wms\",\n//             params: {\n//               layers: \"topp:states\",\n//               TILED: true\n//             },\n//             projection: \"EPSG:4326\"\n//           }),\n//           name: \"USA\"\n//         })\n//       ],\n//       // Add in the following map controls\n//       controls: DefaultControls().extend([\n//         new ZoomSlider(),\n//         new MousePosition(),\n//         new ScaleLine(),\n//         new OverviewMap()\n//       ]),\n//       // Render the tile layers in a map view with a Mercator projection\n//       view: new View({\n//         projection: \"EPSG:3857\",\n//         center: [0, 0],\n//         zoom: 2\n//       })\n//     });\n//   }\n//   componentWillUnmount() {\n//     window.removeEventListener(\"resize\", this.updateDimensions);\n//   }\n//   render() {\n//     const style = {\n//       width: \"100%\",\n//       height: this.state.height,\n//       backgroundColor: \"#cccccc\"\n//     };\n//     return (\n//       <Grid container>\n//         <Grid item xs={12}>\n//           <div id=\"map\" style={style}></div>\n//         </Grid>\n//       </Grid>\n//     );\n//   }\n// }\n// export default OpticMap;\n\nclass OpticMap extends Component {\n  componentDidMount() {\n    // create feature layer and vector source\n    var featuresLayer = new VectorLayer({\n      source: new VectorSource({\n        features: []\n      })\n    }); // create map object with feature layer\n\n    var map = new Map({\n      target: this.refs.mapContainer,\n      layers: [//default OSM layer\n      new TileLayer({\n        source: new OSM()\n      }), featuresLayer],\n      view: new View({\n        center: [-11718716.28195593, 4869217.172379018],\n        //Boulder\n        zoom: 13\n      })\n    }); // map.on(\"click\", this.handleMapClick.bind(this));\n    // save map and layer references to local state\n\n    this.setState({\n      map: map,\n      featuresLayer: featuresLayer\n    });\n  } // pass new features from props into the OpenLayers layer object\n\n\n  componentDidUpdate(prevProps, prevState) {\n    this.state.featuresLayer.setSource(new VectorSource({\n      features: this.props.routes\n    }));\n  } // handleMapClick(event) {\n  //   // create WKT writer\n  //   var wktWriter = new WKT();\n  //   // derive map coordinate (references map from Wrapper Component state)\n  //   var clickedCoordinate = this.state.map.getCoordinateFromPixel(event.pixel);\n  //   // create Point geometry from clicked coordinate\n  //   var clickedPointGeom = new Point(clickedCoordinate);\n  //   // write Point geometry to WKT with wktWriter\n  //   var clickedPointWkt = wktWriter.writeGeometry(clickedPointGeom);\n  //   // place Flux Action call to notify Store map coordinate was clicked\n  //   Actions.setRoutingCoord(clickedPointWkt);\n  // }\n\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"mapContainer\",\n      ref: \"mapContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"aaa\");\n  }\n\n}\n\nexport default OpticMap;","map":{"version":3,"sources":["C:/Users/asus/Documents/javascript_studying/opticMap/optic-map/src/OpticMap.js"],"names":["React","Component","Map","View","VectorLayer","VectorSource","TileLayer","XYZSource","TileWMSSource","ZoomSlider","MousePosition","ScaleLine","OverviewMap","OSM","fromLonLat","WKT","Point","OpticMap","componentDidMount","featuresLayer","source","features","map","target","refs","mapContainer","layers","view","center","zoom","setState","componentDidUpdate","prevProps","prevState","state","setSource","props","routes","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AAEA,SAASC,GAAT,EAAcC,IAAd,QAA0B,IAA1B;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,OAAOC,aAAP,MAA0B,mBAA1B;AACA,SAASC,UAAT,EAAqBC,aAArB,EAAoCC,SAApC,EAA+CC,WAA/C,QAAkE,YAAlE;AACA,OAAOC,GAAP,MAAgB,eAAhB;AACA,SAASC,UAAT,QAA2B,SAA3B;AACA,OAAOC,GAAP,MAAgB,eAAhB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAO,WAAP;AAEA,OAAO,gBAAP,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,QAAN,SAAuBhB,SAAvB,CAAiC;AAC/BiB,EAAAA,iBAAiB,GAAG;AAClB;AACA,QAAIC,aAAa,GAAG,IAAIf,WAAJ,CAAgB;AAClCgB,MAAAA,MAAM,EAAE,IAAIf,YAAJ,CAAiB;AACvBgB,QAAAA,QAAQ,EAAE;AADa,OAAjB;AAD0B,KAAhB,CAApB,CAFkB,CAQlB;;AACA,QAAIC,GAAG,GAAG,IAAIpB,GAAJ,CAAQ;AAChBqB,MAAAA,MAAM,EAAE,KAAKC,IAAL,CAAUC,YADF;AAEhBC,MAAAA,MAAM,EAAE,CACN;AACA,UAAIpB,SAAJ,CAAc;AACZc,QAAAA,MAAM,EAAE,IAAIP,GAAJ;AADI,OAAd,CAFM,EAKNM,aALM,CAFQ;AAShBQ,MAAAA,IAAI,EAAE,IAAIxB,IAAJ,CAAS;AACbyB,QAAAA,MAAM,EAAE,CAAC,CAAC,iBAAF,EAAqB,iBAArB,CADK;AACoC;AACjDC,QAAAA,IAAI,EAAE;AAFO,OAAT;AATU,KAAR,CAAV,CATkB,CAwBlB;AAEA;;AACA,SAAKC,QAAL,CAAc;AACZR,MAAAA,GAAG,EAAEA,GADO;AAEZH,MAAAA,aAAa,EAAEA;AAFH,KAAd;AAID,GAhC8B,CAkC/B;;;AACAY,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACvC,SAAKC,KAAL,CAAWf,aAAX,CAAyBgB,SAAzB,CACE,IAAI9B,YAAJ,CAAiB;AACfgB,MAAAA,QAAQ,EAAE,KAAKe,KAAL,CAAWC;AADN,KAAjB,CADF;AAKD,GAzC8B,CA2C/B;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;;;AAEAC,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,EAAE,EAAC,cAAR;AAAuB,MAAA,GAAG,EAAC,cAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF;AAKD;;AAlE8B;;AAqEjC,eAAerB,QAAf","sourcesContent":["import React, { Component } from \"react\";\n// import { Actions } from \"flux-react\";\n\nimport { Map, View } from \"ol\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport TileLayer from \"ol/layer/Tile\";\nimport XYZSource from \"ol/source/XYZ\";\nimport TileWMSSource from \"ol/source/TileWMS\";\nimport { ZoomSlider, MousePosition, ScaleLine, OverviewMap } from \"ol/control\";\nimport OSM from \"ol/source/OSM\";\nimport { fromLonLat } from \"ol/proj\";\nimport WKT from \"ol/format/WKT\";\nimport Point from \"ol/geom/Point\";\nimport \"ol/ol.css\";\n\nimport \"./OpticMap.css\";\n\n// class OpticMap extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.updateDimensions = this.updateDimensions.bind(this);\n//   }\n//   updateDimensions() {\n//     const h = window.innerWidth >= 992 ? window.innerHeight : 400;\n//     this.setState({ height: h });\n//   }\n//   componentWillMount() {\n//     window.addEventListener(\"resize\", this.updateDimensions);\n//     this.updateDimensions();\n//   }\n//   componentDidMount() {\n//     // Create an Openlayer Map instance with two tile layers\n//     const map = new Map({\n//       //  Display the map in the div with the id of map\n//       target: \"map\",\n//       layers: [\n//         new TileLayer({\n//           source: new XYZSource({\n//             url: \"https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n//             projection: \"EPSG:3857\"\n//           })\n//         }),\n//         new TileLayer({\n//           source: new TileWMSSource({\n//             url: \"https://ahocevar.com/geoserver/wms\",\n//             params: {\n//               layers: \"topp:states\",\n//               TILED: true\n//             },\n//             projection: \"EPSG:4326\"\n//           }),\n//           name: \"USA\"\n//         })\n//       ],\n//       // Add in the following map controls\n//       controls: DefaultControls().extend([\n//         new ZoomSlider(),\n//         new MousePosition(),\n//         new ScaleLine(),\n//         new OverviewMap()\n//       ]),\n//       // Render the tile layers in a map view with a Mercator projection\n//       view: new View({\n//         projection: \"EPSG:3857\",\n//         center: [0, 0],\n//         zoom: 2\n//       })\n//     });\n//   }\n//   componentWillUnmount() {\n//     window.removeEventListener(\"resize\", this.updateDimensions);\n//   }\n//   render() {\n//     const style = {\n//       width: \"100%\",\n//       height: this.state.height,\n//       backgroundColor: \"#cccccc\"\n//     };\n//     return (\n//       <Grid container>\n//         <Grid item xs={12}>\n//           <div id=\"map\" style={style}></div>\n//         </Grid>\n//       </Grid>\n//     );\n//   }\n// }\n// export default OpticMap;\n\nclass OpticMap extends Component {\n  componentDidMount() {\n    // create feature layer and vector source\n    var featuresLayer = new VectorLayer({\n      source: new VectorSource({\n        features: []\n      })\n    });\n\n    // create map object with feature layer\n    var map = new Map({\n      target: this.refs.mapContainer,\n      layers: [\n        //default OSM layer\n        new TileLayer({\n          source: new OSM()\n        }),\n        featuresLayer\n      ],\n      view: new View({\n        center: [-11718716.28195593, 4869217.172379018], //Boulder\n        zoom: 13\n      })\n    });\n\n    // map.on(\"click\", this.handleMapClick.bind(this));\n\n    // save map and layer references to local state\n    this.setState({\n      map: map,\n      featuresLayer: featuresLayer\n    });\n  }\n\n  // pass new features from props into the OpenLayers layer object\n  componentDidUpdate(prevProps, prevState) {\n    this.state.featuresLayer.setSource(\n      new VectorSource({\n        features: this.props.routes\n      })\n    );\n  }\n\n  // handleMapClick(event) {\n  //   // create WKT writer\n  //   var wktWriter = new WKT();\n\n  //   // derive map coordinate (references map from Wrapper Component state)\n  //   var clickedCoordinate = this.state.map.getCoordinateFromPixel(event.pixel);\n\n  //   // create Point geometry from clicked coordinate\n  //   var clickedPointGeom = new Point(clickedCoordinate);\n\n  //   // write Point geometry to WKT with wktWriter\n  //   var clickedPointWkt = wktWriter.writeGeometry(clickedPointGeom);\n\n  //   // place Flux Action call to notify Store map coordinate was clicked\n  //   Actions.setRoutingCoord(clickedPointWkt);\n  // }\n\n  render() {\n    return (\n      <div id=\"mapContainer\" ref=\"mapContainer\">\n        aaa\n      </div>\n    );\n  }\n}\n\nexport default OpticMap;\n"]},"metadata":{},"sourceType":"module"}