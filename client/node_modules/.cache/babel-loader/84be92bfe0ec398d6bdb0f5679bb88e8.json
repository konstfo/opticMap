{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asus\\\\Documents\\\\javascript_studying\\\\opticMap\\\\optic-map\\\\src\\\\OpticMap.js\";\nimport React, { Component } from \"react\";\nimport { Map, View } from \"ol\";\nimport TileLayer from \"ol/layer/Tile\";\nimport OSM from \"ol/source/OSM\";\nimport { fromLonLat, transformExtent, transform } from \"ol/proj\";\nimport \"./OpticMap.css\";\nimport { Circle as CircleStyle, Fill, Stroke, Style } from \"ol/style\";\nimport Feature from \"ol/Feature\";\nimport Point from \"ol/geom/Point\"; // import Group from \"ol/layer/Group\";\n\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport switchesArray from \"./res/switches.json\";\n\nclass OpticMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      map: null,\n      coordinates: \"coordinates\",\n      switchesLayer: true\n    };\n    this.switchesCheckBoxRef = React.createRef(); // this.onCheckBoxChange = this.onCheckBoxChange.bind(this);\n  }\n\n  componentDidMount() {\n    // map settings\n    const extentView = transformExtent([20.969893\n    /** min x */\n    , 57.540673\n    /** min y */\n    , 28.413477\n    /** max x */\n    , 59.894102\n    /** max y */\n    ], \"EPSG:4326\", \"EPSG:3857\");\n    const extentLayer = transformExtent([16.581885\n    /** min x */\n    , 55.671002\n    /** min y */\n    , 32.794556\n    /** max x */\n    , 61.543774\n    /** max y */\n    ], \"EPSG:4326\", \"EPSG:3857\");\n    let map = new Map({\n      target: this.refs.mapContainer,\n      layers: [new TileLayer({\n        source: new OSM(),\n        extent: extentLayer,\n        zIndex: 0\n      })],\n      view: new View({\n        center: fromLonLat([28.185281, 59.374348]),\n        zoom: 14,\n        extent: extentView,\n        minZoom: 7.5\n      })\n    });\n\n    function onCheckBoxChange() {\n      isSwitchesChecked.checked ? switchesLayer.setVisible(\"false\") : switchesLayer.setVisible(\"true\");\n    } // map settings\n    //map feature settings\n\n\n    const isSwitchesChecked = this.switchesCheckBoxRef.current;\n    var featureList = [];\n    switchesArray.map(data => {\n      let featureElement = new Feature({\n        geometry: new Point(fromLonLat(data.coordinates)),\n        address: data.address,\n        ipAddress: data.ipAddress\n      });\n      featureList.push(featureElement);\n      console.log(featureElement.getKeys());\n    });\n    let vectorSource = new VectorSource({\n      features: featureList\n    });\n    let switchesLayer = new VectorLayer({\n      source: vectorSource,\n      visible: isSwitchesChecked.checked,\n      style: new Style({\n        image: new CircleStyle({\n          radius: 3.8,\n          stroke: new Stroke({\n            color: \"black\",\n            width: 1\n          }),\n          fill: new Fill({\n            color: \"tomato\"\n          })\n        })\n      })\n    }); //map feature settings\n    //layers settings\n\n    map.addLayer(switchesLayer); //layers settings\n    // get coordinates by click on map\n\n    map.on(\"click\", function (pointOfClick) {\n      const clickedCoordinate = transform(pointOfClick.coordinate, \"EPSG:3857\", \"EPSG:4326\");\n      let coordinateString = clickedCoordinate[0].toFixed(6) + \",\" + clickedCoordinate[1].toFixed(6);\n      this.setState({\n        coordinates: coordinateString\n      });\n      map.forEachFeatureAtPixel(pointOfClick.pixel, function (feature, layer) {\n        console.log(feature.getProperties().address);\n        console.log(feature.getProperties().ipAddress);\n      });\n      console.log(isSwitchesChecked.checked);\n    }.bind(this)); // change features size on zoom change\n\n    map.getView().on(\"propertychange\", function (e) {\n      switch (e.key) {\n        case \"resolution\":\n          console.log(map.getView().getZoom());\n\n          if (map.getView().getZoom() < 12.8) {\n            switchesLayer.setStyle(new Style({\n              image: new CircleStyle({\n                radius: 1,\n                stroke: new Stroke({\n                  color: \"black\",\n                  width: 1\n                }),\n                fill: new Fill({\n                  color: \"tomato\"\n                })\n              })\n            }));\n          } else if (map.getView().getZoom() < 14) {\n            switchesLayer.setStyle(new Style({\n              image: new CircleStyle({\n                radius: 2.5,\n                stroke: new Stroke({\n                  color: \"black\",\n                  width: 1\n                }),\n                fill: new Fill({\n                  color: \"tomato\"\n                })\n              })\n            }));\n          } else {\n            switchesLayer.setStyle(new Style({\n              image: new CircleStyle({\n                radius: 4,\n                stroke: new Stroke({\n                  color: \"black\",\n                  width: 1\n                }),\n                fill: new Fill({\n                  color: \"tomato\"\n                })\n              })\n            }));\n          }\n\n          break;\n      }\n    });\n    this.setState({\n      map: map\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"opticMapComponent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"leftMapPanel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"coordinateString\",\n      id: \"coordinateString\",\n      ref: this.coordinateRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, this.state.coordinates)), React.createElement(\"div\", {\n      className: \"featureLayers\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"layerCheckBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      value: \"switchesLayer\",\n      className: \"switch\",\n      ref: this.switchesCheckBoxRef,\n      onChange: this.onCheckBoxChange(),\n      defaultChecked: this.state.switchesLayer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, \"switches\")), React.createElement(\"div\", {\n      className: \"layerCheckBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      value: \"clutchesLayer\",\n      className: \"switch\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, \"optic clutches\")), React.createElement(\"div\", {\n      className: \"layerCheckBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      value: \"cableLayer\",\n      className: \"switch\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, \"optic Cable\"))), React.createElement(\"div\", {\n      className: \"featureInfo\",\n      id: \"featureInfo\",\n      ref: \"featureInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"mapContainer\",\n      id: \"mapContainer\",\n      ref: \"mapContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"rightMapPanel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default OpticMap;","map":{"version":3,"sources":["C:/Users/asus/Documents/javascript_studying/opticMap/optic-map/src/OpticMap.js"],"names":["React","Component","Map","View","TileLayer","OSM","fromLonLat","transformExtent","transform","Circle","CircleStyle","Fill","Stroke","Style","Feature","Point","VectorLayer","VectorSource","switchesArray","OpticMap","constructor","props","state","map","coordinates","switchesLayer","switchesCheckBoxRef","createRef","componentDidMount","extentView","extentLayer","target","refs","mapContainer","layers","source","extent","zIndex","view","center","zoom","minZoom","onCheckBoxChange","isSwitchesChecked","checked","setVisible","current","featureList","data","featureElement","geometry","address","ipAddress","push","console","log","getKeys","vectorSource","features","visible","style","image","radius","stroke","color","width","fill","addLayer","on","pointOfClick","clickedCoordinate","coordinate","coordinateString","toFixed","setState","forEachFeatureAtPixel","pixel","feature","layer","getProperties","bind","getView","e","key","getZoom","setStyle","render","coordinateRef"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport { Map, View } from \"ol\";\nimport TileLayer from \"ol/layer/Tile\";\nimport OSM from \"ol/source/OSM\";\nimport { fromLonLat, transformExtent, transform } from \"ol/proj\";\nimport \"./OpticMap.css\";\nimport { Circle as CircleStyle, Fill, Stroke, Style } from \"ol/style\";\nimport Feature from \"ol/Feature\";\nimport Point from \"ol/geom/Point\";\n// import Group from \"ol/layer/Group\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport switchesArray from \"./res/switches.json\";\n\nclass OpticMap extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      map: null,\n      coordinates: \"coordinates\",\n      switchesLayer: true,\n    };\n\n    this.switchesCheckBoxRef = React.createRef();\n    // this.onCheckBoxChange = this.onCheckBoxChange.bind(this);\n  }\n  componentDidMount() {\n    // map settings\n    const extentView = transformExtent(\n      [\n        20.969893 /** min x */,\n        57.540673 /** min y */,\n        28.413477 /** max x */,\n        59.894102 /** max y */,\n      ],\n      \"EPSG:4326\",\n      \"EPSG:3857\"\n    );\n    const extentLayer = transformExtent(\n      [\n        16.581885 /** min x */,\n        55.671002 /** min y */,\n        32.794556 /** max x */,\n        61.543774 /** max y */,\n      ],\n      \"EPSG:4326\",\n      \"EPSG:3857\"\n    );\n\n    let map = new Map({\n      target: this.refs.mapContainer,\n      layers: [\n        new TileLayer({\n          source: new OSM(),\n          extent: extentLayer,\n          zIndex: 0,\n        }),\n      ],\n      view: new View({\n        center: fromLonLat([28.185281, 59.374348]),\n        zoom: 14,\n        extent: extentView,\n        minZoom: 7.5,\n      }),\n    });\n\n    function onCheckBoxChange() {\n      isSwitchesChecked.checked\n        ? switchesLayer.setVisible(\"false\")\n        : switchesLayer.setVisible(\"true\");\n    }\n\n    // map settings\n\n    //map feature settings\n    const isSwitchesChecked = this.switchesCheckBoxRef.current;\n\n    var featureList = [];\n\n    switchesArray.map((data) => {\n      let featureElement = new Feature({\n        geometry: new Point(fromLonLat(data.coordinates)),\n        address: data.address,\n        ipAddress: data.ipAddress,\n      });\n\n      featureList.push(featureElement);\n      console.log(featureElement.getKeys());\n    });\n\n    let vectorSource = new VectorSource({\n      features: featureList,\n    });\n\n    let switchesLayer = new VectorLayer({\n      source: vectorSource,\n      visible: isSwitchesChecked.checked,\n      style: new Style({\n        image: new CircleStyle({\n          radius: 3.8,\n          stroke: new Stroke({ color: \"black\", width: 1 }),\n          fill: new Fill({ color: \"tomato\" }),\n        }),\n      }),\n    });\n\n    //map feature settings\n\n    //layers settings\n    map.addLayer(switchesLayer);\n    //layers settings\n    // get coordinates by click on map\n    map.on(\n      \"click\",\n      function (pointOfClick) {\n        const clickedCoordinate = transform(\n          pointOfClick.coordinate,\n          \"EPSG:3857\",\n          \"EPSG:4326\"\n        );\n        let coordinateString =\n          clickedCoordinate[0].toFixed(6) +\n          \",\" +\n          clickedCoordinate[1].toFixed(6);\n        this.setState({ coordinates: coordinateString });\n\n        map.forEachFeatureAtPixel(pointOfClick.pixel, function (\n          feature,\n          layer\n        ) {\n          console.log(feature.getProperties().address);\n          console.log(feature.getProperties().ipAddress);\n        });\n        console.log(isSwitchesChecked.checked);\n      }.bind(this)\n    );\n    // change features size on zoom change\n    map.getView().on(\"propertychange\", function (e) {\n      switch (e.key) {\n        case \"resolution\":\n          console.log(map.getView().getZoom());\n          if (map.getView().getZoom() < 12.8) {\n            switchesLayer.setStyle(\n              new Style({\n                image: new CircleStyle({\n                  radius: 1,\n                  stroke: new Stroke({ color: \"black\", width: 1 }),\n                  fill: new Fill({ color: \"tomato\" }),\n                }),\n              })\n            );\n          } else if (map.getView().getZoom() < 14) {\n            switchesLayer.setStyle(\n              new Style({\n                image: new CircleStyle({\n                  radius: 2.5,\n                  stroke: new Stroke({ color: \"black\", width: 1 }),\n                  fill: new Fill({ color: \"tomato\" }),\n                }),\n              })\n            );\n          } else {\n            switchesLayer.setStyle(\n              new Style({\n                image: new CircleStyle({\n                  radius: 4,\n                  stroke: new Stroke({ color: \"black\", width: 1 }),\n                  fill: new Fill({ color: \"tomato\" }),\n                }),\n              })\n            );\n          }\n          break;\n      }\n    });\n\n    this.setState({\n      map: map,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"opticMapComponent\">\n        <div className=\"leftMapPanel\">\n          <div\n            className=\"coordinateString\"\n            id=\"coordinateString\"\n            ref={this.coordinateRef}\n          >\n            <p>{this.state.coordinates}</p>\n          </div>\n          <div className=\"featureLayers\">\n            <div className=\"layerCheckBox\">\n              <input\n                type=\"checkbox\"\n                value=\"switchesLayer\"\n                className=\"switch\"\n                ref={this.switchesCheckBoxRef}\n                onChange={this.onCheckBoxChange()}\n                defaultChecked={this.state.switchesLayer}\n              />\n              <div>switches</div>\n            </div>\n\n            <div className=\"layerCheckBox\">\n              <input type=\"checkbox\" value=\"clutchesLayer\" className=\"switch\" />\n              <div>optic clutches</div>\n            </div>\n\n            <div className=\"layerCheckBox\">\n              <input type=\"checkbox\" value=\"cableLayer\" className=\"switch\" />\n              <div>optic Cable</div>\n            </div>\n          </div>\n          <div className=\"featureInfo\" id=\"featureInfo\" ref=\"featureInfo\"></div>\n        </div>\n        <div\n          className=\"mapContainer\"\n          id=\"mapContainer\"\n          ref=\"mapContainer\"\n        ></div>\n        <div className=\"rightMapPanel\"></div>\n      </div>\n    );\n  }\n}\n\nexport default OpticMap;\n"]},"metadata":{},"sourceType":"module"}