{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asus\\\\Documents\\\\javascript_studying\\\\opticMap\\\\optic-map\\\\src\\\\OpticMap.js\";\nimport React, { Component } from \"react\";\nimport { Map, View } from \"ol\";\nimport TileLayer from \"ol/layer/Tile\";\nimport OSM from \"ol/source/OSM\";\nimport { fromLonLat, transformExtent, transform } from \"ol/proj\";\nimport \"./OpticMap.css\";\nimport { Circle as CircleStyle, Fill, Stroke, Style } from \"ol/style\";\nimport Feature from \"ol/Feature\";\nimport Point from \"ol/geom/Point\"; // import Group from \"ol/layer/Group\";\n\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport switchesArray from \"./res/switches.json\";\n\nclass OpticMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      map: null,\n      coordinates: \"coordinates\"\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.switchesLayer.setVisible(!this.switchesLayer.visible);\n  }\n\n  componentDidMount() {\n    // map settings\n    const extentView = transformExtent([20.969893\n    /** min x */\n    , 57.540673\n    /** min y */\n    , 28.413477\n    /** max x */\n    , 59.894102\n    /** max y */\n    ], \"EPSG:4326\", \"EPSG:3857\");\n    const extentLayer = transformExtent([16.581885\n    /** min x */\n    , 55.671002\n    /** min y */\n    , 32.794556\n    /** max x */\n    , 61.543774\n    /** max y */\n    ], \"EPSG:4326\", \"EPSG:3857\");\n    let map = new Map({\n      target: this.refs.mapContainer,\n      layers: [new TileLayer({\n        source: new OSM(),\n        extent: extentLayer,\n        zIndex: 0\n      })],\n      view: new View({\n        center: fromLonLat([28.185281, 59.374348]),\n        zoom: 14,\n        extent: extentView,\n        minZoom: 7.5\n      })\n    }); // map settings\n    //map feature settings\n\n    var featureList = [];\n    switchesArray.map(data => {\n      let featureElement = new Feature({\n        geometry: new Point(fromLonLat(data.coordinates)),\n        address: data.address,\n        ipAddress: data.ipAddress\n      });\n      featureList.push(featureElement);\n      console.log(featureElement.getKeys());\n    });\n    let vectorSource = new VectorSource({\n      features: featureList\n    });\n    this.switchesLayer = new VectorLayer({\n      source: vectorSource,\n      visible: true,\n      style: new Style({\n        image: new CircleStyle({\n          radius: 3.8,\n          stroke: new Stroke({\n            color: \"black\",\n            width: 1\n          }),\n          fill: new Fill({\n            color: \"tomato\"\n          })\n        })\n      })\n    });\n    this.switchesLayer.bind(this); //map feature settings\n    //layers settings\n\n    map.addLayer(this.switchesLayer); //layers settings\n    // get coordinates by click on map\n\n    map.on(\"click\", function (pointOfClick) {\n      const clickedCoordinate = transform(pointOfClick.coordinate, \"EPSG:3857\", \"EPSG:4326\");\n      let coordinateString = clickedCoordinate[0].toFixed(6) + \",\" + clickedCoordinate[1].toFixed(6);\n      this.setState({\n        coordinates: coordinateString\n      });\n      map.forEachFeatureAtPixel(pointOfClick.pixel, function (feature, layer) {\n        console.log(feature.getProperties().address);\n        console.log(feature.getProperties().ipAddress);\n      });\n    }.bind(this)); // change features size on zoom change\n\n    map.getView().on(\"propertychange\", function (e) {\n      switch (e.key) {\n        case \"resolution\":\n          console.log(map.getView().getZoom());\n\n          if (map.getView().getZoom() < 12.8) {\n            map.getLayers().setStyle(new Style({\n              image: new CircleStyle({\n                radius: 1,\n                stroke: new Stroke({\n                  color: \"black\",\n                  width: 1\n                }),\n                fill: new Fill({\n                  color: \"tomato\"\n                })\n              })\n            }));\n          } else if (map.getView().getZoom() < 14) {\n            this.switchesLayer.setStyle(new Style({\n              image: new CircleStyle({\n                radius: 2.5,\n                stroke: new Stroke({\n                  color: \"black\",\n                  width: 1\n                }),\n                fill: new Fill({\n                  color: \"tomato\"\n                })\n              })\n            }));\n          } else {\n            this.switchesLayer.setStyle(new Style({\n              image: new CircleStyle({\n                radius: 4,\n                stroke: new Stroke({\n                  color: \"black\",\n                  width: 1\n                }),\n                fill: new Fill({\n                  color: \"tomato\"\n                })\n              })\n            }));\n          }\n\n          break;\n      }\n    });\n    this.setState({\n      map: map\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"opticMapComponent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"leftMapPanel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"coordinateString\",\n      id: \"coordinateString\",\n      ref: this.coordinateRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, this.state.coordinates)), React.createElement(\"div\", {\n      className: \"featureLayers\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"layerCheckBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      value: \"switchesLayer\",\n      className: \"switch\",\n      onClick: this.handleClick,\n      defaultChecked: \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, \"switches\")), React.createElement(\"div\", {\n      className: \"layerCheckBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      value: \"clutchesLayer\",\n      className: \"switch\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, \"optic clutches\")), React.createElement(\"div\", {\n      className: \"layerCheckBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      value: \"cableLayer\",\n      className: \"switch\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, \"optic Cable\"))), React.createElement(\"div\", {\n      className: \"featureInfo\",\n      id: \"featureInfo\",\n      ref: \"featureInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"mapContainer\",\n      id: \"mapContainer\",\n      ref: \"mapContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"rightMapPanel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default OpticMap;","map":{"version":3,"sources":["C:/Users/asus/Documents/javascript_studying/opticMap/optic-map/src/OpticMap.js"],"names":["React","Component","Map","View","TileLayer","OSM","fromLonLat","transformExtent","transform","Circle","CircleStyle","Fill","Stroke","Style","Feature","Point","VectorLayer","VectorSource","switchesArray","OpticMap","constructor","props","state","map","coordinates","handleClick","bind","switchesLayer","setVisible","visible","componentDidMount","extentView","extentLayer","target","refs","mapContainer","layers","source","extent","zIndex","view","center","zoom","minZoom","featureList","data","featureElement","geometry","address","ipAddress","push","console","log","getKeys","vectorSource","features","style","image","radius","stroke","color","width","fill","addLayer","on","pointOfClick","clickedCoordinate","coordinate","coordinateString","toFixed","setState","forEachFeatureAtPixel","pixel","feature","layer","getProperties","getView","e","key","getZoom","getLayers","setStyle","render","coordinateRef"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport { Map, View } from \"ol\";\nimport TileLayer from \"ol/layer/Tile\";\nimport OSM from \"ol/source/OSM\";\nimport { fromLonLat, transformExtent, transform } from \"ol/proj\";\nimport \"./OpticMap.css\";\nimport { Circle as CircleStyle, Fill, Stroke, Style } from \"ol/style\";\nimport Feature from \"ol/Feature\";\nimport Point from \"ol/geom/Point\";\n// import Group from \"ol/layer/Group\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport switchesArray from \"./res/switches.json\";\n\nclass OpticMap extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      map: null,\n      coordinates: \"coordinates\",\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.switchesLayer.setVisible(!this.switchesLayer.visible);\n  }\n  componentDidMount() {\n    // map settings\n    const extentView = transformExtent(\n      [\n        20.969893 /** min x */,\n        57.540673 /** min y */,\n        28.413477 /** max x */,\n        59.894102 /** max y */,\n      ],\n      \"EPSG:4326\",\n      \"EPSG:3857\"\n    );\n    const extentLayer = transformExtent(\n      [\n        16.581885 /** min x */,\n        55.671002 /** min y */,\n        32.794556 /** max x */,\n        61.543774 /** max y */,\n      ],\n      \"EPSG:4326\",\n      \"EPSG:3857\"\n    );\n\n    let map = new Map({\n      target: this.refs.mapContainer,\n      layers: [\n        new TileLayer({\n          source: new OSM(),\n          extent: extentLayer,\n          zIndex: 0,\n        }),\n      ],\n      view: new View({\n        center: fromLonLat([28.185281, 59.374348]),\n        zoom: 14,\n        extent: extentView,\n        minZoom: 7.5,\n      }),\n    });\n\n    // map settings\n\n    //map feature settings\n\n    var featureList = [];\n\n    switchesArray.map((data) => {\n      let featureElement = new Feature({\n        geometry: new Point(fromLonLat(data.coordinates)),\n        address: data.address,\n        ipAddress: data.ipAddress,\n      });\n\n      featureList.push(featureElement);\n      console.log(featureElement.getKeys());\n    });\n\n    let vectorSource = new VectorSource({\n      features: featureList,\n    });\n\n    this.switchesLayer = new VectorLayer({\n      source: vectorSource,\n      visible: true,\n      style: new Style({\n        image: new CircleStyle({\n          radius: 3.8,\n          stroke: new Stroke({ color: \"black\", width: 1 }),\n          fill: new Fill({ color: \"tomato\" }),\n        }),\n      }),\n    });\n\n    this.switchesLayer.bind(this);\n\n    //map feature settings\n\n    //layers settings\n    map.addLayer(this.switchesLayer);\n    //layers settings\n    // get coordinates by click on map\n    map.on(\n      \"click\",\n      function (pointOfClick) {\n        const clickedCoordinate = transform(\n          pointOfClick.coordinate,\n          \"EPSG:3857\",\n          \"EPSG:4326\"\n        );\n        let coordinateString =\n          clickedCoordinate[0].toFixed(6) +\n          \",\" +\n          clickedCoordinate[1].toFixed(6);\n        this.setState({ coordinates: coordinateString });\n\n        map.forEachFeatureAtPixel(pointOfClick.pixel, function (\n          feature,\n          layer\n        ) {\n          console.log(feature.getProperties().address);\n          console.log(feature.getProperties().ipAddress);\n        });\n      }.bind(this)\n    );\n    // change features size on zoom change\n    map.getView().on(\"propertychange\", function (e) {\n      switch (e.key) {\n        case \"resolution\":\n          console.log(map.getView().getZoom());\n          if (map.getView().getZoom() < 12.8) {\n            map.getLayers().setStyle(\n              new Style({\n                image: new CircleStyle({\n                  radius: 1,\n                  stroke: new Stroke({ color: \"black\", width: 1 }),\n                  fill: new Fill({ color: \"tomato\" }),\n                }),\n              })\n            );\n          } else if (map.getView().getZoom() < 14) {\n            this.switchesLayer.setStyle(\n              new Style({\n                image: new CircleStyle({\n                  radius: 2.5,\n                  stroke: new Stroke({ color: \"black\", width: 1 }),\n                  fill: new Fill({ color: \"tomato\" }),\n                }),\n              })\n            );\n          } else {\n            this.switchesLayer.setStyle(\n              new Style({\n                image: new CircleStyle({\n                  radius: 4,\n                  stroke: new Stroke({ color: \"black\", width: 1 }),\n                  fill: new Fill({ color: \"tomato\" }),\n                }),\n              })\n            );\n          }\n          break;\n      }\n    });\n\n    this.setState({\n      map: map,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"opticMapComponent\">\n        <div className=\"leftMapPanel\">\n          <div\n            className=\"coordinateString\"\n            id=\"coordinateString\"\n            ref={this.coordinateRef}\n          >\n            <p>{this.state.coordinates}</p>\n          </div>\n          <div className=\"featureLayers\">\n            <div className=\"layerCheckBox\">\n              <input\n                type=\"checkbox\"\n                value=\"switchesLayer\"\n                className=\"switch\"\n                onClick={this.handleClick}\n                defaultChecked=\"true\"\n              />\n              <div>switches</div>\n            </div>\n\n            <div className=\"layerCheckBox\">\n              <input type=\"checkbox\" value=\"clutchesLayer\" className=\"switch\" />\n              <div>optic clutches</div>\n            </div>\n\n            <div className=\"layerCheckBox\">\n              <input type=\"checkbox\" value=\"cableLayer\" className=\"switch\" />\n              <div>optic Cable</div>\n            </div>\n          </div>\n          <div className=\"featureInfo\" id=\"featureInfo\" ref=\"featureInfo\"></div>\n        </div>\n        <div\n          className=\"mapContainer\"\n          id=\"mapContainer\"\n          ref=\"mapContainer\"\n        ></div>\n        <div className=\"rightMapPanel\"></div>\n      </div>\n    );\n  }\n}\n\nexport default OpticMap;\n"]},"metadata":{},"sourceType":"module"}