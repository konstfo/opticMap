{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asus\\\\Documents\\\\javascript_studying\\\\opticMap\\\\optic-map\\\\src\\\\OpticMap.js\";\nimport React, { Component } from \"react\"; // import { Actions } from \"flux-react\";\n\nimport { Map, View } from \"ol\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport TileLayer from \"ol/layer/Tile\";\nimport XYZSource from \"ol/source/XYZ\";\nimport TileWMSSource from \"ol/source/TileWMS\";\nimport { ZoomSlider, MousePosition, ScaleLine, OverviewMap } from \"ol/control\";\nimport OSM from \"ol/source/OSM\";\nimport { fromLonLat } from \"ol/proj\";\nimport WKT from \"ol/format/WKT\";\nimport Point from \"ol/geom/Point\";\n\nclass OpticMap extends React.Component {\n  constructor(props) {\n    super(props);\n    this.updateDimensions = this.updateDimensions.bind(this);\n  }\n\n  updateDimensions() {\n    const h = window.innerWidth >= 992 ? window.innerHeight : 400;\n    this.setState({\n      height: h\n    });\n  }\n\n  componentWillMount() {\n    window.addEventListener(\"resize\", this.updateDimensions);\n    this.updateDimensions();\n  }\n\n  componentDidMount() {\n    // Create an Openlayer Map instance with two tile layers\n    const map = new Map({\n      //  Display the map in the div with the id of map\n      target: \"map\",\n      layers: [new TileLayer({\n        source: new XYZSource({\n          url: \"https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n          projection: \"EPSG:3857\"\n        })\n      }), new TileLayer({\n        source: new TileWMSSource({\n          url: \"https://ahocevar.com/geoserver/wms\",\n          params: {\n            layers: \"topp:states\",\n            TILED: true\n          },\n          projection: \"EPSG:4326\"\n        }),\n        name: \"USA\"\n      })],\n      // Add in the following map controls\n      controls: DefaultControls().extend([new ZoomSlider(), new MousePosition(), new ScaleLine(), new OverviewMap()]),\n      // Render the tile layers in a map view with a Mercator projection\n      view: new View({\n        projection: \"EPSG:3857\",\n        center: [0, 0],\n        zoom: 2\n      })\n    });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateDimensions);\n  }\n\n  render() {\n    const style = {\n      width: \"100%\",\n      height: this.state.height,\n      backgroundColor: \"#cccccc\"\n    };\n    return React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"map\",\n      style: style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default OpticMap; // class OpticMap extends Component {\n//   componentDidMount() {\n//     // create feature layer and vector source\n//     var featuresLayer = new VectorLayer({\n//       source: new VectorSource({\n//         features: []\n//       })\n//     });\n//     // create map object with feature layer\n//     var map = new Map({\n//       target: this.refs.mapContainer,\n//       layers: [\n//         //default OSM layer\n//         new TileLayer({\n//           source: new OSM()\n//         }),\n//         featuresLayer\n//       ],\n//       view: new View({\n//         center: [-11718716.28195593, 4869217.172379018], //Boulder\n//         zoom: 13\n//       })\n//     });\n//     // map.on(\"click\", this.handleMapClick.bind(this));\n//     // save map and layer references to local state\n//     this.setState({\n//       map: map,\n//       featuresLayer: featuresLayer\n//     });\n//   }\n//   // pass new features from props into the OpenLayers layer object\n//   componentDidUpdate(prevProps, prevState) {\n//     this.state.featuresLayer.setSource(\n//       new VectorSource({\n//         features: this.props.routes\n//       })\n//     );\n//   }\n//   // handleMapClick(event) {\n//   //   // create WKT writer\n//   //   var wktWriter = new WKT();\n//   //   // derive map coordinate (references map from Wrapper Component state)\n//   //   var clickedCoordinate = this.state.map.getCoordinateFromPixel(event.pixel);\n//   //   // create Point geometry from clicked coordinate\n//   //   var clickedPointGeom = new Point(clickedCoordinate);\n//   //   // write Point geometry to WKT with wktWriter\n//   //   var clickedPointWkt = wktWriter.writeGeometry(clickedPointGeom);\n//   //   // place Flux Action call to notify Store map coordinate was clicked\n//   //   Actions.setRoutingCoord(clickedPointWkt);\n//   // }\n//   render() {\n//     return <div ref=\"mapContainer\"></div>;\n//   }\n// }\n// export default OpticMap;","map":{"version":3,"sources":["C:/Users/asus/Documents/javascript_studying/opticMap/optic-map/src/OpticMap.js"],"names":["React","Component","Map","View","VectorLayer","VectorSource","TileLayer","XYZSource","TileWMSSource","ZoomSlider","MousePosition","ScaleLine","OverviewMap","OSM","fromLonLat","WKT","Point","OpticMap","constructor","props","updateDimensions","bind","h","window","innerWidth","innerHeight","setState","height","componentWillMount","addEventListener","componentDidMount","map","target","layers","source","url","projection","params","TILED","name","controls","DefaultControls","extend","view","center","zoom","componentWillUnmount","removeEventListener","render","style","width","state","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n// import { Actions } from \"flux-react\";\n\nimport { Map, View } from \"ol\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport TileLayer from \"ol/layer/Tile\";\nimport XYZSource from \"ol/source/XYZ\";\nimport TileWMSSource from \"ol/source/TileWMS\";\nimport { ZoomSlider, MousePosition, ScaleLine, OverviewMap } from \"ol/control\";\nimport OSM from \"ol/source/OSM\";\nimport { fromLonLat } from \"ol/proj\";\nimport WKT from \"ol/format/WKT\";\nimport Point from \"ol/geom/Point\";\n\nclass OpticMap extends React.Component {\n  constructor(props) {\n    super(props);\n    this.updateDimensions = this.updateDimensions.bind(this);\n  }\n  updateDimensions() {\n    const h = window.innerWidth >= 992 ? window.innerHeight : 400;\n    this.setState({ height: h });\n  }\n  componentWillMount() {\n    window.addEventListener(\"resize\", this.updateDimensions);\n    this.updateDimensions();\n  }\n  componentDidMount() {\n    // Create an Openlayer Map instance with two tile layers\n    const map = new Map({\n      //  Display the map in the div with the id of map\n      target: \"map\",\n      layers: [\n        new TileLayer({\n          source: new XYZSource({\n            url: \"https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n            projection: \"EPSG:3857\"\n          })\n        }),\n        new TileLayer({\n          source: new TileWMSSource({\n            url: \"https://ahocevar.com/geoserver/wms\",\n            params: {\n              layers: \"topp:states\",\n              TILED: true\n            },\n            projection: \"EPSG:4326\"\n          }),\n          name: \"USA\"\n        })\n      ],\n      // Add in the following map controls\n      controls: DefaultControls().extend([\n        new ZoomSlider(),\n        new MousePosition(),\n        new ScaleLine(),\n        new OverviewMap()\n      ]),\n      // Render the tile layers in a map view with a Mercator projection\n      view: new View({\n        projection: \"EPSG:3857\",\n        center: [0, 0],\n        zoom: 2\n      })\n    });\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateDimensions);\n  }\n  render() {\n    const style = {\n      width: \"100%\",\n      height: this.state.height,\n      backgroundColor: \"#cccccc\"\n    };\n    return (\n      <Grid container>\n        <Grid item xs={12}>\n          <div id=\"map\" style={style}></div>\n        </Grid>\n      </Grid>\n    );\n  }\n}\nexport default OpticMap;\n\n// class OpticMap extends Component {\n//   componentDidMount() {\n//     // create feature layer and vector source\n//     var featuresLayer = new VectorLayer({\n//       source: new VectorSource({\n//         features: []\n//       })\n//     });\n\n//     // create map object with feature layer\n//     var map = new Map({\n//       target: this.refs.mapContainer,\n//       layers: [\n//         //default OSM layer\n//         new TileLayer({\n//           source: new OSM()\n//         }),\n//         featuresLayer\n//       ],\n//       view: new View({\n//         center: [-11718716.28195593, 4869217.172379018], //Boulder\n//         zoom: 13\n//       })\n//     });\n\n//     // map.on(\"click\", this.handleMapClick.bind(this));\n\n//     // save map and layer references to local state\n//     this.setState({\n//       map: map,\n//       featuresLayer: featuresLayer\n//     });\n//   }\n\n//   // pass new features from props into the OpenLayers layer object\n//   componentDidUpdate(prevProps, prevState) {\n//     this.state.featuresLayer.setSource(\n//       new VectorSource({\n//         features: this.props.routes\n//       })\n//     );\n//   }\n\n//   // handleMapClick(event) {\n//   //   // create WKT writer\n//   //   var wktWriter = new WKT();\n\n//   //   // derive map coordinate (references map from Wrapper Component state)\n//   //   var clickedCoordinate = this.state.map.getCoordinateFromPixel(event.pixel);\n\n//   //   // create Point geometry from clicked coordinate\n//   //   var clickedPointGeom = new Point(clickedCoordinate);\n\n//   //   // write Point geometry to WKT with wktWriter\n//   //   var clickedPointWkt = wktWriter.writeGeometry(clickedPointGeom);\n\n//   //   // place Flux Action call to notify Store map coordinate was clicked\n//   //   Actions.setRoutingCoord(clickedPointWkt);\n//   // }\n\n//   render() {\n//     return <div ref=\"mapContainer\"></div>;\n//   }\n// }\n\n// export default OpticMap;\n"]},"metadata":{},"sourceType":"module"}