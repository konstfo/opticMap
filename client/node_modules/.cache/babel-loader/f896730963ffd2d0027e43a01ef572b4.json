{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asus\\\\Documents\\\\javascript_studying\\\\opticMap\\\\optic-map\\\\src\\\\OpticMap.js\";\nimport React, { Component } from \"react\";\nimport { Actions } from \"flux-react\";\nimport { Map, View } from \"ol\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport TileLayer from \"ol/layer/Tile\";\nimport XYZSource from \"ol/source/XYZ\";\nimport TileWMSSource from \"ol/source/TileWMS\";\nimport { ZoomSlider, MousePosition, ScaleLine, OverviewMap } from \"ol/control\";\nimport OSM from \"ol/source/OSM\";\nimport { fromLonLat } from \"ol/proj\";\nimport interaction from \"ol/interaction\";\nimport WKT from \"ol/format/WKT\";\nimport Point from \"ol/geom/Point\";\nimport \"ol/style\";\nimport \"./OpticMap.css\";\n\nclass OpticMap extends Component {\n  componentDidMount() {\n    // create feature layer and vector source\n    var featuresLayer = new VectorLayer({\n      source: new VectorSource({\n        features: []\n      })\n    });\n    const narvaWebMercator = fromLonLat([28.1818, 59.3662]); // create map object with feature layer\n\n    var map = new Map({\n      target: this.refs.mapContainer,\n      layers: [//default OSM layer\n      new TileLayer({\n        source: new OSM()\n      }), featuresLayer],\n      view: new View({\n        center: narvaWebMercator,\n        //Boulder\n        zoom: 13\n      })\n    });\n    map.on(\"click\", this.handleMapClick.bind(this));\n    map.getInteractions().forEach(interaction => {\n      if (interaction instanceof interaction.Select) {\n        interaction.setActive(false);\n      }\n    }); // save map and layer references to local state\n\n    this.setState({\n      map: map,\n      featuresLayer: featuresLayer\n    });\n  } // pass new features from props into the OpenLayers layer object\n\n\n  componentDidUpdate(prevProps, prevState) {\n    this.state.featuresLayer.setSource(new VectorSource({\n      features: this.props.routes\n    }));\n  }\n\n  handleMapClick(event) {\n    // create WKT writer\n    var wktWriter = new WKT(); // derive map coordinate (references map from Wrapper Component state)\n\n    var clickedCoordinate = this.state.map.getCoordinateFromPixel(event.pixel); // create Point geometry from clicked coordinate\n\n    var clickedPointGeom = new Point(clickedCoordinate); // write Point geometry to WKT with wktWriter\n\n    var clickedPointWkt = wktWriter.writeGeometry(clickedPointGeom); // place Flux Action call to notify Store map coordinate was clicked\n\n    Actions.setRoutingCoord(clickedPointWkt);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"mapContainer\",\n      id: \"mapContainer\",\n      ref: \"mapContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default OpticMap;","map":{"version":3,"sources":["C:/Users/asus/Documents/javascript_studying/opticMap/optic-map/src/OpticMap.js"],"names":["React","Component","Actions","Map","View","VectorLayer","VectorSource","TileLayer","XYZSource","TileWMSSource","ZoomSlider","MousePosition","ScaleLine","OverviewMap","OSM","fromLonLat","interaction","WKT","Point","OpticMap","componentDidMount","featuresLayer","source","features","narvaWebMercator","map","target","refs","mapContainer","layers","view","center","zoom","on","handleMapClick","bind","getInteractions","forEach","Select","setActive","setState","componentDidUpdate","prevProps","prevState","state","setSource","props","routes","event","wktWriter","clickedCoordinate","getCoordinateFromPixel","pixel","clickedPointGeom","clickedPointWkt","writeGeometry","setRoutingCoord","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Actions } from \"flux-react\";\n\nimport { Map, View } from \"ol\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport TileLayer from \"ol/layer/Tile\";\nimport XYZSource from \"ol/source/XYZ\";\nimport TileWMSSource from \"ol/source/TileWMS\";\nimport { ZoomSlider, MousePosition, ScaleLine, OverviewMap } from \"ol/control\";\nimport OSM from \"ol/source/OSM\";\nimport { fromLonLat } from \"ol/proj\";\nimport interaction from \"ol/interaction\";\nimport WKT from \"ol/format/WKT\";\nimport Point from \"ol/geom/Point\";\nimport \"ol/style\";\nimport \"./OpticMap.css\";\n\nclass OpticMap extends Component {\n  componentDidMount() {\n    // create feature layer and vector source\n    var featuresLayer = new VectorLayer({\n      source: new VectorSource({\n        features: []\n      })\n    });\n    const narvaWebMercator = fromLonLat([28.1818, 59.3662]);\n    // create map object with feature layer\n    var map = new Map({\n      target: this.refs.mapContainer,\n      layers: [\n        //default OSM layer\n        new TileLayer({\n          source: new OSM()\n        }),\n        featuresLayer\n      ],\n      view: new View({\n        center: narvaWebMercator, //Boulder\n        zoom: 13\n      })\n    });\n\n    map.on(\"click\", this.handleMapClick.bind(this));\n    map.getInteractions().forEach(interaction => {\n      if (interaction instanceof interaction.Select) {\n        interaction.setActive(false);\n      }\n    });\n\n    // save map and layer references to local state\n    this.setState({\n      map: map,\n      featuresLayer: featuresLayer\n    });\n  }\n\n  // pass new features from props into the OpenLayers layer object\n  componentDidUpdate(prevProps, prevState) {\n    this.state.featuresLayer.setSource(\n      new VectorSource({\n        features: this.props.routes\n      })\n    );\n  }\n\n  handleMapClick(event) {\n    // create WKT writer\n    var wktWriter = new WKT();\n\n    // derive map coordinate (references map from Wrapper Component state)\n    var clickedCoordinate = this.state.map.getCoordinateFromPixel(event.pixel);\n\n    // create Point geometry from clicked coordinate\n    var clickedPointGeom = new Point(clickedCoordinate);\n\n    // write Point geometry to WKT with wktWriter\n    var clickedPointWkt = wktWriter.writeGeometry(clickedPointGeom);\n\n    // place Flux Action call to notify Store map coordinate was clicked\n    Actions.setRoutingCoord(clickedPointWkt);\n  }\n\n  render() {\n    return (\n      <div className=\"mapContainer\" id=\"mapContainer\" ref=\"mapContainer\"></div>\n    );\n  }\n}\n\nexport default OpticMap;\n"]},"metadata":{},"sourceType":"module"}