{"ast":null,"code":"/**\n * @module ol/events/condition\n */\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport { assert } from '../asserts.js';\nimport { TRUE, FALSE } from '../functions.js';\nimport { WEBKIT, MAC } from '../has.js';\n/**\n * A function that takes an {@link module:ol/MapBrowserEvent} and returns a\n * `{boolean}`. If the condition is met, true should be returned.\n *\n * @typedef {function(this: ?, import(\"../MapBrowserEvent.js\").default): boolean} Condition\n */\n\n/**\n * Return `true` if only the alt-key is pressed, `false` otherwise (e.g. when\n * additionally the shift-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the alt key is pressed.\n * @api\n */\n\nexport var altKeyOnly = function altKeyOnly(mapBrowserEvent) {\n  var originalEvent =\n  /** @type {KeyboardEvent|MouseEvent|TouchEvent} */\n  mapBrowserEvent.originalEvent;\n  return originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && !originalEvent.shiftKey;\n};\n/**\n * Return `true` if only the alt-key and shift-key is pressed, `false` otherwise\n * (e.g. when additionally the platform-modifier-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the alt and shift keys are pressed.\n * @api\n */\n\nexport var altShiftKeysOnly = function altShiftKeysOnly(mapBrowserEvent) {\n  var originalEvent =\n  /** @type {KeyboardEvent|MouseEvent|TouchEvent} */\n  mapBrowserEvent.originalEvent;\n  return originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && originalEvent.shiftKey;\n};\n/**\n * Return `true` if the map has the focus. This condition requires a map target\n * element with a `tabindex` attribute, e.g. `<div id=\"map\" tabindex=\"1\">`.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\n * @return {boolean} The map has the focus.\n * @api\n */\n\nexport var focus = function focus(event) {\n  return event.target.getTargetElement() === document.activeElement;\n};\n/**\n * Return always true.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True.\n * @api\n */\n\nexport var always = TRUE;\n/**\n * Return `true` if the event is a `click` event, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `click` event.\n * @api\n */\n\nexport var click = function click(mapBrowserEvent) {\n  return mapBrowserEvent.type == MapBrowserEventType.CLICK;\n};\n/**\n * Return `true` if the event has an \"action\"-producing mouse button.\n *\n * By definition, this includes left-click on windows/linux, and left-click\n * without the ctrl key on Macs.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} The result.\n */\n\nexport var mouseActionButton = function mouseActionButton(mapBrowserEvent) {\n  var originalEvent =\n  /** @type {MouseEvent} */\n  mapBrowserEvent.originalEvent;\n  return originalEvent.button == 0 && !(WEBKIT && MAC && originalEvent.ctrlKey);\n};\n/**\n * Return always false.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} False.\n * @api\n */\n\nexport var never = FALSE;\n/**\n * Return `true` if the browser event is a `pointermove` event, `false`\n * otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the browser event is a `pointermove` event.\n * @api\n */\n\nexport var pointerMove = function pointerMove(mapBrowserEvent) {\n  return mapBrowserEvent.type == 'pointermove';\n};\n/**\n * Return `true` if the event is a map `singleclick` event, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `singleclick` event.\n * @api\n */\n\nexport var singleClick = function singleClick(mapBrowserEvent) {\n  return mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK;\n};\n/**\n * Return `true` if the event is a map `dblclick` event, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `dblclick` event.\n * @api\n */\n\nexport var doubleClick = function doubleClick(mapBrowserEvent) {\n  return mapBrowserEvent.type == MapBrowserEventType.DBLCLICK;\n};\n/**\n * Return `true` if no modifier key (alt-, shift- or platform-modifier-key) is\n * pressed.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True only if there no modifier keys are pressed.\n * @api\n */\n\nexport var noModifierKeys = function noModifierKeys(mapBrowserEvent) {\n  var originalEvent =\n  /** @type {KeyboardEvent|MouseEvent|TouchEvent} */\n  mapBrowserEvent.originalEvent;\n  return !originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && !originalEvent.shiftKey;\n};\n/**\n * Return `true` if only the platform-modifier-key (the meta-key on Mac,\n * ctrl-key otherwise) is pressed, `false` otherwise (e.g. when additionally\n * the shift-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the platform modifier key is pressed.\n * @api\n */\n\nexport var platformModifierKeyOnly = function platformModifierKeyOnly(mapBrowserEvent) {\n  var originalEvent =\n  /** @type {KeyboardEvent|MouseEvent|TouchEvent} */\n  mapBrowserEvent.originalEvent;\n  return !originalEvent.altKey && (MAC ? originalEvent.metaKey : originalEvent.ctrlKey) && !originalEvent.shiftKey;\n};\n/**\n * Return `true` if only the shift-key is pressed, `false` otherwise (e.g. when\n * additionally the alt-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the shift key is pressed.\n * @api\n */\n\nexport var shiftKeyOnly = function shiftKeyOnly(mapBrowserEvent) {\n  var originalEvent =\n  /** @type {KeyboardEvent|MouseEvent|TouchEvent} */\n  mapBrowserEvent.originalEvent;\n  return !originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && originalEvent.shiftKey;\n};\n/**\n * Return `true` if the target element is not editable, i.e. not a `<input>`-,\n * `<select>`- or `<textarea>`-element, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True only if the target element is not editable.\n * @api\n */\n\nexport var targetNotEditable = function targetNotEditable(mapBrowserEvent) {\n  var originalEvent =\n  /** @type {KeyboardEvent|MouseEvent|TouchEvent} */\n  mapBrowserEvent.originalEvent;\n  var tagName =\n  /** @type {Element} */\n  originalEvent.target.tagName;\n  return tagName !== 'INPUT' && tagName !== 'SELECT' && tagName !== 'TEXTAREA';\n};\n/**\n * Return `true` if the event originates from a mouse device.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a mouse device.\n * @api\n */\n\nexport var mouseOnly = function mouseOnly(mapBrowserEvent) {\n  var pointerEvent =\n  /** @type {import(\"../MapBrowserPointerEvent\").default} */\n  mapBrowserEvent.pointerEvent;\n  assert(pointerEvent !== undefined, 56); // mapBrowserEvent must originate from a pointer event\n  // see http://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n\n  return pointerEvent.pointerType == 'mouse';\n};\n/**\n * Return `true` if the event originates from a touchable device.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a touchable device.\n * @api\n */\n\nexport var touchOnly = function touchOnly(mapBrowserEvent) {\n  var pointerEvt =\n  /** @type {import(\"../MapBrowserPointerEvent\").default} */\n  mapBrowserEvent.pointerEvent;\n  assert(pointerEvt !== undefined, 56); // mapBrowserEvent must originate from a pointer event\n  // see http://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n\n  return pointerEvt.pointerType === 'touch';\n};\n/**\n * Return `true` if the event originates from a digital pen.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a digital pen.\n * @api\n */\n\nexport var penOnly = function penOnly(mapBrowserEvent) {\n  var pointerEvt =\n  /** @type {import(\"../MapBrowserPointerEvent\").default} */\n  mapBrowserEvent.pointerEvent;\n  assert(pointerEvt !== undefined, 56); // mapBrowserEvent must originate from a pointer event\n  // see http://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n\n  return pointerEvt.pointerType === 'pen';\n};\n/**\n * Return `true` if the event originates from a primary pointer in\n * contact with the surface or if the left mouse button is pressed.\n * See http://www.w3.org/TR/pointerevents/#button-states.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a primary pointer.\n * @api\n */\n\nexport var primaryAction = function primaryAction(mapBrowserEvent) {\n  var pointerEvent =\n  /** @type {import(\"../MapBrowserPointerEvent\").default} */\n  mapBrowserEvent.pointerEvent;\n  assert(pointerEvent !== undefined, 56); // mapBrowserEvent must originate from a pointer event\n\n  return pointerEvent.isPrimary && pointerEvent.button === 0;\n};","map":{"version":3,"sources":["../src/events/condition.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @module ol/events/condition\n */\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport { assert } from '../asserts.js';\nimport { TRUE, FALSE } from '../functions.js';\nimport { WEBKIT, MAC } from '../has.js';\n/**\n * A function that takes an {@link module:ol/MapBrowserEvent} and returns a\n * `{boolean}`. If the condition is met, true should be returned.\n *\n * @typedef {function(this: ?, import(\"../MapBrowserEvent.js\").default): boolean} Condition\n */\n/**\n * Return `true` if only the alt-key is pressed, `false` otherwise (e.g. when\n * additionally the shift-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the alt key is pressed.\n * @api\n */\nexport var altKeyOnly = function (mapBrowserEvent) {\n    var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);\n    return (originalEvent.altKey &&\n        !(originalEvent.metaKey || originalEvent.ctrlKey) &&\n        !originalEvent.shiftKey);\n};\n/**\n * Return `true` if only the alt-key and shift-key is pressed, `false` otherwise\n * (e.g. when additionally the platform-modifier-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the alt and shift keys are pressed.\n * @api\n */\nexport var altShiftKeysOnly = function (mapBrowserEvent) {\n    var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);\n    return (originalEvent.altKey &&\n        !(originalEvent.metaKey || originalEvent.ctrlKey) &&\n        originalEvent.shiftKey);\n};\n/**\n * Return `true` if the map has the focus. This condition requires a map target\n * element with a `tabindex` attribute, e.g. `<div id=\"map\" tabindex=\"1\">`.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\n * @return {boolean} The map has the focus.\n * @api\n */\nexport var focus = function (event) {\n    return event.target.getTargetElement() === document.activeElement;\n};\n/**\n * Return always true.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True.\n * @api\n */\nexport var always = TRUE;\n/**\n * Return `true` if the event is a `click` event, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `click` event.\n * @api\n */\nexport var click = function (mapBrowserEvent) {\n    return mapBrowserEvent.type == MapBrowserEventType.CLICK;\n};\n/**\n * Return `true` if the event has an \"action\"-producing mouse button.\n *\n * By definition, this includes left-click on windows/linux, and left-click\n * without the ctrl key on Macs.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} The result.\n */\nexport var mouseActionButton = function (mapBrowserEvent) {\n    var originalEvent = /** @type {MouseEvent} */ (mapBrowserEvent.originalEvent);\n    return originalEvent.button == 0 &&\n        !(WEBKIT && MAC && originalEvent.ctrlKey);\n};\n/**\n * Return always false.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} False.\n * @api\n */\nexport var never = FALSE;\n/**\n * Return `true` if the browser event is a `pointermove` event, `false`\n * otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the browser event is a `pointermove` event.\n * @api\n */\nexport var pointerMove = function (mapBrowserEvent) {\n    return mapBrowserEvent.type == 'pointermove';\n};\n/**\n * Return `true` if the event is a map `singleclick` event, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `singleclick` event.\n * @api\n */\nexport var singleClick = function (mapBrowserEvent) {\n    return mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK;\n};\n/**\n * Return `true` if the event is a map `dblclick` event, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `dblclick` event.\n * @api\n */\nexport var doubleClick = function (mapBrowserEvent) {\n    return mapBrowserEvent.type == MapBrowserEventType.DBLCLICK;\n};\n/**\n * Return `true` if no modifier key (alt-, shift- or platform-modifier-key) is\n * pressed.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True only if there no modifier keys are pressed.\n * @api\n */\nexport var noModifierKeys = function (mapBrowserEvent) {\n    var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);\n    return (!originalEvent.altKey &&\n        !(originalEvent.metaKey || originalEvent.ctrlKey) &&\n        !originalEvent.shiftKey);\n};\n/**\n * Return `true` if only the platform-modifier-key (the meta-key on Mac,\n * ctrl-key otherwise) is pressed, `false` otherwise (e.g. when additionally\n * the shift-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the platform modifier key is pressed.\n * @api\n */\nexport var platformModifierKeyOnly = function (mapBrowserEvent) {\n    var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);\n    return !originalEvent.altKey &&\n        (MAC ? originalEvent.metaKey : originalEvent.ctrlKey) &&\n        !originalEvent.shiftKey;\n};\n/**\n * Return `true` if only the shift-key is pressed, `false` otherwise (e.g. when\n * additionally the alt-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the shift key is pressed.\n * @api\n */\nexport var shiftKeyOnly = function (mapBrowserEvent) {\n    var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);\n    return (!originalEvent.altKey &&\n        !(originalEvent.metaKey || originalEvent.ctrlKey) &&\n        originalEvent.shiftKey);\n};\n/**\n * Return `true` if the target element is not editable, i.e. not a `<input>`-,\n * `<select>`- or `<textarea>`-element, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True only if the target element is not editable.\n * @api\n */\nexport var targetNotEditable = function (mapBrowserEvent) {\n    var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);\n    var tagName = /** @type {Element} */ (originalEvent.target).tagName;\n    return tagName !== 'INPUT' && tagName !== 'SELECT' && tagName !== 'TEXTAREA';\n};\n/**\n * Return `true` if the event originates from a mouse device.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a mouse device.\n * @api\n */\nexport var mouseOnly = function (mapBrowserEvent) {\n    var pointerEvent = /** @type {import(\"../MapBrowserPointerEvent\").default} */ (mapBrowserEvent).pointerEvent;\n    assert(pointerEvent !== undefined, 56); // mapBrowserEvent must originate from a pointer event\n    // see http://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n    return pointerEvent.pointerType == 'mouse';\n};\n/**\n * Return `true` if the event originates from a touchable device.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a touchable device.\n * @api\n */\nexport var touchOnly = function (mapBrowserEvent) {\n    var pointerEvt = /** @type {import(\"../MapBrowserPointerEvent\").default} */ (mapBrowserEvent).pointerEvent;\n    assert(pointerEvt !== undefined, 56); // mapBrowserEvent must originate from a pointer event\n    // see http://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n    return pointerEvt.pointerType === 'touch';\n};\n/**\n * Return `true` if the event originates from a digital pen.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a digital pen.\n * @api\n */\nexport var penOnly = function (mapBrowserEvent) {\n    var pointerEvt = /** @type {import(\"../MapBrowserPointerEvent\").default} */ (mapBrowserEvent).pointerEvent;\n    assert(pointerEvt !== undefined, 56); // mapBrowserEvent must originate from a pointer event\n    // see http://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n    return pointerEvt.pointerType === 'pen';\n};\n/**\n * Return `true` if the event originates from a primary pointer in\n * contact with the surface or if the left mouse button is pressed.\n * See http://www.w3.org/TR/pointerevents/#button-states.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a primary pointer.\n * @api\n */\nexport var primaryAction = function (mapBrowserEvent) {\n    var pointerEvent = /** @type {import(\"../MapBrowserPointerEvent\").default} */ (mapBrowserEvent).pointerEvent;\n    assert(pointerEvent !== undefined, 56); // mapBrowserEvent must originate from a pointer event\n    return pointerEvent.isPrimary && pointerEvent.button === 0;\n};\n//# sourceMappingURL=condition.js.map"]},"metadata":{},"sourceType":"module"}